@use 'sass:math';

$input-c: #B81D13 #EFB700 #008450;
$track-w: 25em;
$track-h: .375em;
$thumb-d: 1.75em;
// major and minor ruler line length
$ruler-t: 1px;
$ruler-l: .875em;


// defining a slider triangle marker
@mixin reg-poly(
  $n: 3, // default number of vertices
  $oa: 90deg, // default offset angle
) {
  $ba: 360deg / $n; // base angle calculation
  $vx: (); // list of vertices, initially empty

  // defining position and angle of triangle lines
  @for $i from 0 to $n {
    $ca: $i * $ba + $oa; // current angle calculation
    $vx: $vx, 50% * (1 + math.cos($ca)) 50% * (1 + math.sin($ca));
  }

  // drawing triangle with calculated vertices
  --poly: #{polygon($vx)};
  -webkit-clip-path: var(--poly);
          clip-path: var(--poly);
}


@mixin thumb() {
  margin-top: -.2 * $thumb-d;
  border: none;
  width: $thumb-d;
  height: $thumb-d;
  background: currentColor;

  // definining number of vertices for the slider cursor
  @include reg-poly(3);
  
  cursor: ew-resize;
}



* {
  margin: 0;
  padding: 0;
  font: inherit;
  color: inherit;
}

html, body, form, form * {
  display: grid;
}

html {
  height: 100%;
}

.js {
  --js: 1;
}

body, datalist {
  place-content: center;
}

body {
  font: 1em / 1.25 Verdana, sans-serif;
}

form, option {
  place-items: center;
}

form {
  // defining variables for switching views between media sizes
  --extra: 0;
  --large: 0;
  --not-large: calc(1 - var(--large));
  --small: 0;
  --not-small: calc(1 - var(--small));

  // defining the width variable for form
  --track-w: min(#{$track-w}, 100vw - 2 * #{$thumb-d});

  overflow-x: hidden;
  padding: .5 * $thumb-d;
  // sets background as grayscale
  background: hsla(0, 0%, 91%, var(--hl));
  filter: grayscale(calc(1 - var(--hl, 0)));
  transition: .35s;

  // media query for different screen sizes
  @media (min-width: $track-w + 2 * $thumb-d) {
    --extra: 1;
  }
  @media (min-width: 320px) {
    --large: 1;
  }
  @media (max-width: 220px) {
    --small: 1;
  }

  // at focus or hover disable grayscale
  &:focus-within, &:hover { --hl: 1};

}

label {
  font-size: 137.5%;
}

[for] {
  font-weight: 700;
}

input {
  &::-webkit-slider-runnable-track,
  &::-webkit-slider-thumb, 
  & {
    -webkit-appearance: none;
  }

  // expand the width to include full width of first and last value 
  width: calc(var(--track-w) + #{$thumb-d});
  background: 
    linear-gradient(90deg, nth($input-c, 1) 25%, nth($input-c, 2) 0 75%, nth($input-c, 3) 0)
      50% / var(--track-w) $track-h no-repeat;

  cursor: pointer;

  // browser support
  &::-webkit-slider-thumb {
    @include thumb
  }
  &::-moz-range-thumb {
    @include thumb
  }

  &:focus {
    outline: none;
  }


  + output {
    --rng: calc(var(--max) - var(--min));
    // calculating the position of slider value
    --pos: calc((var(--val) - var(--min)) / var(--rng) * var(--track-w));

    display: var(--js, none);

    grid-row: 2;
    justify-self: start;
    // moving slider value with the slider
    transform: translate(calc(.5 * #{$thumb-d} +var(--pos) - 50%));
    counter-reset: val var(--val);

    &::after {
      content: counter(val);
    }
  }
}

datalist {
  // definining unit variable that divides width with number of slider parts
  --track-u: calc(var(--track-w) / var(--n));
    
  grid-auto-flow: column;
  // definining width to start at min and end at max slider values
  width: calc(var(--track-w) + #{$ruler-t});
  // adding horizontal line
  box-shadow: inset 0 $ruler-t currentColor;

  // adding small tick lines
  background: 
    linear-gradient(90deg, currentColor $ruler-t, transparent 0) repeat-x;
  background-size: 
    calc(var(--track-u) / 5) calc(var(--extra) * .5 * #{$ruler-l});
}

option {
  // multiplier that defaults to large at first
  --m: calc(var(--large));

  width: calc(var(--m) * var(--track-u));

  // transforming smaller ticks during resizing of screen
  transform-origin: 50% 0;
  transform: scale(min(1, var(--m)));
  transition: transform .35s;

  // remove every odd tick element while resizing
  &::nth-child(odd) {
    --m: calc(var(--large) + 2 * var(--not-large) * var(--not-small))
  };
  // remove all ticks except first and last element
  &:first-child, &:last-child {
    --m: calc(var(--large) + var(--not-large) * (2 * var(--not-small) + .5 * var(--n) * var(--small)))
  };
  &.mid {
    --m: calc(var(--large) + var(--not-large) * .5 * var(--n) * var(--small))
  };
  &::before {
    width: $ruler-t; 
    height: $ruler-l;
    background: currentColor;
    content: '';
  };
}